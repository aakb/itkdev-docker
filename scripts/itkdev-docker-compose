#!/usr/bin/env bash
set -o errexit -o errtrace -o noclobber -o nounset -o pipefail
IFS=$'\n\t'

script_dir=$(cd $(dirname "${BASH_SOURCE[0]}") && pwd)
script_path=$script_dir/$(basename "${BASH_SOURCE[0]}")

bold=$(tput bold)
normal=$(tput sgr0)

function usage {
  cat <<'EOF'
Usage: itkdev-docker-compose command [command arguments]

Commands:

  url
                Print url to site

  open
                Open url in default browser

  drush
                Run drush command. If drush in installed via composer,
                the vendor/bin/drush command is run inside the phpfpm
                container. Otherwise, the drush container is used to
                run the command.

  sync
                Sync both database and files.

  sync:db
                Sync database base on 'REMOTE_DB_DUMP_CMD' in the env
                file.

  sync:files
                Sync files base on 'REMOTE_PATH' or 'LOCAL_PATH' in
                the env file.

  sql:connect
                Print mysql command for connecting to database (named
                `db`) in the database container (`mariadb`).

                Use `$(itkdev-docker-compose sql:connect)` to open the
                database cli.

  sql:port
                Display the exposed MariaDB SQL server port.

  mailhog:url
                URL for the mailhog web-interface.

  mailhog:open
                Open mailhog url in default browser

  xdebug
                Boot the containers with PHP xdebug support enabled.

  hosts:insert
                Insert the docker site url into the hosts file.

  images:pull
                Update/pull all docker images.

  composer
                Run composer command inside phpfpm container

  bin/*
  vendor/bin/*
                Run command command inside phpfpm container

  *
                Pass command and arguments to `docker-compose` and
                hope for the best.

EOF
}

# @see https://unix.stackexchange.com/questions/13464/is-there-a-way-to-find-a-file-in-an-inverse-recursive-search/13474
upsearch () {
  slashes=${PWD//[^\/]/}
  directory="$PWD"
  for (( n=${#slashes}; n>0; --n ))
  do
    test -e "$directory/$1" && echo "$directory/$1" && return
    directory="$directory/.."
  done
}

docker_compose_file=$(upsearch 'docker-compose.yml')
if [ -z "$docker_compose_file" ]; then
  (>&2 echo "${bold}Cannot find docker-compose.yml file${normal}")
  exit 1
fi

docker_compose_dir=$(cd $(dirname "$docker_compose_file") && pwd)
dot_env_file="$docker_compose_dir/.env"

if [ -z "$dot_env_file" ]; then
  (>&2 echo "${bold}$dot_env_file not found${normal}")
  exit 1
fi

source $dot_env_file

if [ -z "${COMPOSE_PROJECT_NAME:-}" ]; then
  (>&2 echo "${bold}Environment variable COMPOSE_PROJECT_NAME not defined in $dot_env_file${normal}")
  exit 1
fi

if [ "$#" == "0" ]; then
  usage
  exit 1
fi

# Helper function to call `docker-compose` in the right context
docker_compose () {
    # Note: Apparently, using --project-directory or --file options for `docker-compose` will break use of `$PWD` in
    # docker-compose.yml. Therefore, we `cd` before running `docker-compose` command.
    (cd "$docker_compose_dir" && docker-compose "$@")
}

cmd="$1"
shift

case "$cmd" in
  url)
    DNS=${COMPOSE_PROJECT_NAME}.docker.localhost
    url=http://${DNS}:$(docker_compose port reverse-proxy 80 | cut -d: -f2)
    echo $url
    ;;

  open)
    open $($script_path url)
    ;;

  sync)
    itkdev-docker-compose sync:db
    itkdev-docker-compose sync:files
    ;;

  sync:db)
    if [ -z "${REMOTE_HOST:-}" ]; then
      (>&2 echo "${bold}Environment variable REMOTE_HOST not defined in $dot_env_file${normal}")
      exit 1
    fi
    if [ -z "${REMOTE_DB_DUMP_CMD:-}" ]; then
      (>&2 echo "${bold}Environment variable REMOTE_DB_DUMP_CMD not defined in $dot_env_file${normal} see readme for more information about this setting")
      exit 1
    fi

    ssh ${REMOTE_HOST} ${REMOTE_DB_DUMP_CMD} | eval $(itkdev-docker-compose sql:connect)
    ;;

  sync:files)
    if [ -z "${REMOTE_HOST:-}" ]; then
      (>&2 echo "${bold}Environment variable REMOTE_HOST not defined in $dot_env_file${normal}")
      exit 1
    fi
    if [ -z "${REMOTE_PATH:-}" ]; then
      (>&2 echo "${bold}Environment variable REMOTE_PATH not defined in $dot_env_file${normal}")
      exit 1
    fi
    if [ -z "${LOCAL_PATH:-}" ]; then
      (>&2 echo "${bold}Environment variable LOCAL_PATH not defined in $dot_env_file${normal}")
      exit 1
    fi

    REMOTE_PATH=${REMOTE_PATH%/}
    LOCAL_PATH=${LOCAL_PATH%/}
    excludes=''
    for i in "${REMOTE_EXCLUDE[@]}"
    do
      excludes+="--exclude='${i}' "
    done

    eval rsync -avz ${excludes} ${REMOTE_HOST}:${REMOTE_PATH}/ ${docker_compose_dir}/${LOCAL_PATH}
    ;;

  sql:connect)
    address=$(docker_compose port mariadb 3306)
    host=$(echo $address | cut -d: -f1)
    port=$(echo $address | cut -d: -f2)
    echo mysql --host=$host --port=$port --user=db --password=db db
    ;;

  sql:port)
    docker_compose port mariadb 3306 | cut -d: -f2
    ;;

  mailhog:url)
    DNS=${COMPOSE_PROJECT_NAME}.docker.localhost
    url=http://${DNS}:$(docker_compose port mailhog 8025 | cut -d: -f2)
    echo $url;;

  mailhog:open)
    open $(itkdev-docker-compose mailhog:url)
    ;;

  xdebug)
    PHP_XDEBUG=1 \
    PHP_XDEBUG_REMOTE_AUTOSTART=1 \
    PHP_XDEBUG_REMOTE_HOST=$(ipconfig getifaddr en0) \
    PHP_XDEBUG_REMOTE_PORT=9000 \
    PHP_XDEBUG_REMOTE_CONNECT_BACK=0 \
    docker_compose up -d
    ;;

  hosts:insert)
    DNS=${COMPOSE_PROJECT_NAME}.docker.localhost
    # Remove any existing entry
    sudo sed -i '.itkdev-docker-compose' "/$DNS/d" /etc/hosts
    # Append the entry
    echo "0.0.0.0 $DNS # itkdev-docker-compose" | sudo tee -a /etc/hosts
    ;;

  images:pull)
    docker images --format "{{.Repository}}:{{.Tag}}" | grep -v "<none>" | sort | uniq
    read -p "Are you sure you want to update all images? " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
      docker images --format "{{.Repository}}:{{.Tag}}" | grep -v "<none>" | sort | uniq | xargs -L1 docker pull
    fi
    ;;

  drush)
    root=/app
    if [ -d $docker_compose_dir/web ]; then
      root=/app/web
    fi
    if [ -e $docker_compose_dir/vendor/bin/drush ]; then
      docker_compose exec phpfpm /app/vendor/bin/drush --root=$root "$@"
    else
      docker_compose run --rm drush --root=$root "$@"
    fi
    ;;

  composer)
    docker_compose exec phpfpm composer "$@"
    ;;

  bin/*|vendor/bin/*)
    docker_compose exec phpfpm /app/$cmd "$@"
    ;;

  --help)
    usage
    exit
    ;;

  *)
    docker_compose "$cmd" "$@"
    ;;
esac
